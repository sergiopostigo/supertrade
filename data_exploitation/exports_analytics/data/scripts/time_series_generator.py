from database_settings import postgres_utilities
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from project_settings import project_settings
class generate:

    def __init__(self, heading, time_series_name):
        self.heading = heading
        self.time_series_name = time_series_name

        # Establish the connection with the Persistent Zone
        engine = postgres_utilities.engine(message_flag=False)
        # Get all the heading's data
        data = pd.DataFrame(postgres_utilities.run_query_file(engine,
                                                              project_settings.details().root+
                                                              'data_exploitation/exports_analytics/data/queries/read_peru_exports_sandbox_by_heading.sql',
                                                              params={'chosen_heading': heading, }))
        # Get the heading information
        self.description = data.loc[0, 'description']
        # Get the start and end dates
        self.start_date, self.end_date = data['boarding_date'].min(), data['boarding_date'].max()

        # Create the desired time series
        if time_series_name == 'usd_kg':
            # ----------------------------------------------------------
            # Filtering approach
            # ----------------------------------------------------------
            data = data[['net_weight', 'value_usd', 'boarding_date']]
            # Create the usd by kilogram column
            data['usd_kg'] = data['value_usd'] / data['net_weight']
            data['usd_kg'] = data['usd_kg'].astype(float)
            data['usd_kg'] = data['usd_kg'].round(3)
            # Group by boarding_date
            data = data[['boarding_date', 'usd_kg']].groupby(by=['boarding_date']).mean().round(3)
            # Impute missing dates assigning the usd_kg of the day before
            data.index = pd.to_datetime(data.index)
            data = data.resample('D').ffill()
            # ----------------------------------------------------------
        elif time_series_name == 'net_weight':
            # ----------------------------------------------------------
            # Filtering approach
            # ----------------------------------------------------------
            data = data[['boarding_date', 'net_weight']].groupby(by=['boarding_date']).sum().round(3)
            # Impute missing dates assigning 0 kg for days without shipments
            data.index = pd.to_datetime(data.index)
            data = data.resample('D').asfreq()
            data.fillna(0.0, inplace=True)
            # Convert numerical columns to float
            data = data.astype({'net_weight': 'float'})
            # ----------------------------------------------------------
        else:
            raise ValueError('No time-series defined with the name \'{}\''.format(time_series_name))

        self.data = data

    def plot(self):
        # Plot time series
        plt.figure(figsize=(18, 6))
        sns.lineplot(x=self.data.index, y=self.time_series_name, data=self.data)
        plt.title(self.description)
        plt.show()